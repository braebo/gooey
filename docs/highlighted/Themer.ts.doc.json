{
  "type": "ts",
  "fileName": "Themer.ts",
  "filePath": "src/styles/themer/Themer.ts",
  "exports": [
    {
      "name": "ThemerJSON",
      "type": "ThemerJSON",
      "isDefaultExport": false,
      "comment": {
        "raw": "/**\n * A JSON representation of the {@link Themer} class. Used in the {@link Themer.toJSON | toJSON()} and {@link Themer.fromJSON | fromJSON()}, methods, and subsequently, in {@link Themer.save | save()} and {@link Themer.load | load()}.\n */",
        "links": [
          {
            "target": "Themer",
            "text": "Themer"
          },
          {
            "target": "Themer",
            "text": "toJSON()"
          },
          {
            "target": "Themer",
            "text": "fromJSON()"
          },
          {
            "target": "Themer",
            "text": "save()"
          },
          {
            "target": "Themer",
            "text": "load()"
          }
        ],
        "summary": "<p>A JSON representation of the <a href=\"#Themer\">Themer</a> class. Used in the\n[Themer.toJSON | toJSON()](#Themer.toJSON | toJSON()) and [Themer.fromJSON | fromJSON()](#Themer.fromJSON | fromJSON()),\nmethods, and subsequently, in [Themer.save | save()](#Themer.save | save())\nand [Themer.load | load()](#Themer.load | load()).</p>\n"
      }
    },
    {
      "name": "ThemerOptions",
      "type": "ThemerOptions",
      "isDefaultExport": false,
      "comment": {
        "raw": "/**\n * Options for the {@link Themer} class.\n */",
        "links": [
          {
            "target": "Themer",
            "text": "Themer"
          }
        ],
        "summary": "<p>Options for the <a href=\"#Themer\">Themer</a> class.</p>\n"
      }
    },
    {
      "name": "THEMER_DEFAULTS",
      "type": "ThemerOptions",
      "isDefaultExport": false,
      "comment": {
        "raw": "/**\n * Default {@link ThemerOptions} object.\n */",
        "links": [
          {
            "target": "ThemerOptions",
            "text": "ThemerOptions"
          }
        ],
        "summary": "<p>Default <a href=\"#ThemerOptions\">ThemerOptions</a> object.</p>\n"
      }
    },
    {
      "name": "Themer",
      "type": "Themer",
      "isDefaultExport": false,
      "comment": {
        "raw": "/**\n * The `Themer` class manages multiple customizable themes. These themes can be applied globally to the document, or scoped to a specific node.\n *\n * A {@link Theme} is a collection of CSS custom properties, most importantly, shades / colors. Themes can be created as JavaScript objects or JSON in the form of a {@link ThemeDefinition}, which is just a Partial<{@link Theme}> run through {@link resolveTheme} to generate `theme.colors.dark` and `theme.colors.light` variants from `theme.colors.base`. This can be extended arbitrarily (// todo //).\n *\n * It can be used to store, retrieve, create, and apply themes. It can apply themes to either the root document, or a specific node and its children. Each {@link ThemeDefinition} has light and dark variants (auto-generated if not specified), and the active variant isdetermined by the current {@link ThemeMode}, which can be set to 'light', 'dark', or 'system'.\n *\n * @example\n * ```svelte\n * <script lang=\"ts\">\n * \timport { Themer } from 'fractils'\n * \timport my_theme from './themes/my_theme'\n *\n * \tconst themer = new Themer('document', {\n * \t\ttheme: my_theme,    // optional theme definition (JS object or JSON)\n * \t\tthemes: [my_theme], // optional array of themes\n * \t\tmode: 'dark',       // optional initial mode ('light', 'dark', or 'system')\n * \t})\n * </script>\n *\n * <h1>{themer.theme.title}</h1>\n * <button on:click={() => themer.mode = 'dark'}>dark mode</button>\n * <button on:click={() => themer.addTheme({...})}>add theme</button>\n * ```\n *\n */",
        "links": [
          {
            "target": "Theme",
            "text": "Theme"
          },
          {
            "target": "ThemeDefinition",
            "text": "ThemeDefinition"
          },
          {
            "target": "Theme",
            "text": "Theme"
          },
          {
            "target": "resolveTheme",
            "text": "resolveTheme"
          },
          {
            "target": "ThemeDefinition",
            "text": "ThemeDefinition"
          },
          {
            "target": "ThemeMode",
            "text": "ThemeMode"
          }
        ],
        "summary": "<p>The <code>Themer</code> class manages multiple customizable themes. These themes\ncan be applied globally to the document, or scoped to a specific node.</p>\n<p>A <a href=\"#Theme\">Theme</a> is a collection of CSS custom properties, most\nimportantly, shades / colors. Themes can be created as JavaScript\nobjects or JSON in the form of a <a href=\"#ThemeDefinition\">ThemeDefinition</a>, which is\njust a Partial&lt;<a href=\"#Theme\">Theme</a>&gt; run through <a href=\"#resolveTheme\">resolveTheme</a> to\ngenerate <code>theme.colors.dark</code> and <code>theme.colors.light</code> variants from\n<code>theme.colors.base</code>. This can be extended arbitrarily (// todo //).</p>\n<p>It can be used to store, retrieve, create, and apply themes. It can\napply themes to either the root document, or a specific node and\nits children. Each <a href=\"#ThemeDefinition\">ThemeDefinition</a> has light and dark\nvariants (auto-generated if not specified), and the active\nvariant isdetermined by the current <a href=\"#ThemeMode\">ThemeMode</a>,\nwhich can be set to &#39;light&#39;, &#39;dark&#39;, or &#39;system&#39;.</p>\n",
        "examples": [
          {
            "content": "```svelte\n<script lang=\"ts\">\n\timport { Themer } from 'fractils'\n\timport my_theme from './themes/my_theme'\n\n\tconst themer = new Themer('document', {\n\t\ttheme: my_theme,  // optional theme definition (JS object or JSON)\n\t\tthemes: [my_theme], // optional array of themes\n\t\tmode: 'dark',    // optional initial mode ('light', 'dark', or 'system')\n\t})\n</script>\n\n<h1>{themer.theme.title}</h1>\n<button on:click={() => themer.mode = 'dark'}>dark mode</button>\n<button on:click={() => themer.addTheme({...})}>add theme</button>\n```",
            "blocks": [
              {
                "type": "code",
                "content": "<pre class=\"shiki serendipity\" style=\"background-color:#0000;color:#d4d4d4\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#777D8F\">&#x3C;script</span><span style=\"color:#9CCFD8;font-style:italic\"> lang</span><span style=\"color:#777D8F\">=</span><span style=\"color:#A78BFA\">\"ts\"</span><span style=\"color:#777D8F\">></span></span>\n<span class=\"line\"><span style=\"color:#5BA2D0\">    import </span><span style=\"color:#8D8F9E\">{</span><span style=\"color:#DEE0EF\"> Themer</span><span style=\"color:#8D8F9E\"> }</span><span style=\"color:#5BA2D0\"> from </span><span style=\"color:#A78BFA\">'fractils'</span></span>\n<span class=\"line\"><span style=\"color:#5BA2D0\">    import </span><span style=\"color:#DEE0EF\">my_theme</span><span style=\"color:#5BA2D0\"> from </span><span style=\"color:#A78BFA\">'./themes/my_theme'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#5BA2D0\">    const</span><span style=\"color:#DEE0EF\"> themer</span><span style=\"color:#5BA2D0\"> =</span><span style=\"color:#5BA2D0\"> new</span><span style=\"color:#F8D2C9\"> Themer</span><span style=\"color:#DEE0EF\">(</span><span style=\"color:#A78BFA\">'document'</span><span style=\"color:#8D8F9E\">,</span><span style=\"color:#8D8F9E\"> {</span></span>\n<span class=\"line\"><span style=\"color:#777D8F\">        theme</span><span style=\"color:#8D8F9E\">:</span><span style=\"color:#DEE0EF\"> my_theme</span><span style=\"color:#8D8F9E\">,</span><span style=\"color:#8D8F9E;font-style:italic\">  //</span><span style=\"color:#6B6D7C;font-style:italic\"> optional theme definition (JS object or JSON)</span></span>\n<span class=\"line\"><span style=\"color:#777D8F\">        themes</span><span style=\"color:#8D8F9E\">:</span><span style=\"color:#DEE0EF\"> [my_theme]</span><span style=\"color:#8D8F9E\">,</span><span style=\"color:#8D8F9E;font-style:italic\"> //</span><span style=\"color:#6B6D7C;font-style:italic\"> optional array of themes</span></span>\n<span class=\"line\"><span style=\"color:#777D8F\">        mode</span><span style=\"color:#8D8F9E\">:</span><span style=\"color:#A78BFA\"> 'dark'</span><span style=\"color:#8D8F9E\">,</span><span style=\"color:#8D8F9E;font-style:italic\">    //</span><span style=\"color:#6B6D7C;font-style:italic\"> optional initial mode ('light', 'dark', or 'system')</span></span>\n<span class=\"line\"><span style=\"color:#8D8F9E\">    }</span><span style=\"color:#DEE0EF\">)</span></span>\n<span class=\"line\"><span style=\"color:#777D8F\">&#x3C;/script></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#777D8F\">&#x3C;h1></span><span style=\"color:#8D8F9E\">{</span><span style=\"color:#DEE0EF\">themer</span><span style=\"color:#5BA2D0\">.</span><span style=\"color:#DEE0EF\">theme</span><span style=\"color:#5BA2D0\">.</span><span style=\"color:#DEE0EF\">title</span><span style=\"color:#8D8F9E\">}</span><span style=\"color:#777D8F\">&#x3C;/h1></span></span>\n<span class=\"line\"><span style=\"color:#777D8F\">&#x3C;button</span><span style=\"color:#5BA2D0\"> on</span><span style=\"color:#8D8F9E\">:</span><span style=\"color:#94B8FF\">click</span><span style=\"color:#777D8F\">=</span><span style=\"color:#8D8F9E\">{()</span><span style=\"color:#5BA2D0\"> =></span><span style=\"color:#DEE0EF\"> themer</span><span style=\"color:#5BA2D0\">.</span><span style=\"color:#DEE0EF\">mode </span><span style=\"color:#5BA2D0\">=</span><span style=\"color:#A78BFA\"> 'dark'</span><span style=\"color:#8D8F9E\">}</span><span style=\"color:#777D8F\">>dark mode&#x3C;/button></span></span>\n<span class=\"line\"><span style=\"color:#777D8F\">&#x3C;button</span><span style=\"color:#5BA2D0\"> on</span><span style=\"color:#8D8F9E\">:</span><span style=\"color:#94B8FF\">click</span><span style=\"color:#777D8F\">=</span><span style=\"color:#8D8F9E\">{()</span><span style=\"color:#5BA2D0\"> =></span><span style=\"color:#DEE0EF\"> themer</span><span style=\"color:#5BA2D0\">.</span><span style=\"color:#F8D2C9\">addTheme</span><span style=\"color:#DEE0EF\">(</span><span style=\"color:#8D8F9E\">{</span><span style=\"color:#5BA2D0\">...</span><span style=\"color:#8D8F9E\">}</span><span style=\"color:#DEE0EF\">)</span><span style=\"color:#8D8F9E\">}</span><span style=\"color:#777D8F\">>add theme&#x3C;/button></span></span></code></pre>",
                "lang": "svelte",
                "raw": "<script lang=\"ts\">\n    import { Themer } from 'fractils'\n    import my_theme from './themes/my_theme'\n\n    const themer = new Themer('document', {\n        theme: my_theme,  // optional theme definition (JS object or JSON)\n        themes: [my_theme], // optional array of themes\n        mode: 'dark',    // optional initial mode ('light', 'dark', or 'system')\n    })\n</script>\n\n<h1>{themer.theme.title}</h1>\n<button on:click={() => themer.mode = 'dark'}>dark mode</button>\n<button on:click={() => themer.addTheme({...})}>add theme</button>",
                "title": ""
              }
            ]
          }
        ]
      }
    }
  ]
}