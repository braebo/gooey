{
  "type": "ts",
  "fileName": "Folder.ts",
  "filePath": "src/Folder.ts",
  "exports": [
    {
      "name": "InferOptions",
      "type": "InferOptions<T>",
      "isDefaultExport": false,
      "comment": {
        "raw": "/**\n * Resolves the provided value to the corresponding {@link InputOptions} type associated with the type based on what type of {@link InputOptions.value | `value`} property it expects.\n */",
        "links": [
          {
            "target": "InputOptions",
            "text": "InputOptions"
          },
          {
            "target": "InputOptions",
            "text": "`value`"
          }
        ],
        "summary": "<p>Resolves the provided value to the corresponding <a href=\"#InputOptions\">InputOptions</a> type associated with the type\nbased on what type of <a href=\"#InputOptions.value%7C%60value%60\">InputOptions.value|<code>value</code></a> property it expects.</p>\n"
      }
    },
    {
      "name": "InferInput",
      "type": "InferInput<TValueType>",
      "isDefaultExport": false,
      "comment": {
        "raw": "/**\n * Resolves any provided value to the corresponding {@link ValidInput} associated with the type.\n */",
        "links": [
          {
            "target": "ValidInput",
            "text": "ValidInput"
          }
        ],
        "summary": "<p>Resolves any provided value to the corresponding <a href=\"#ValidInput\">ValidInput</a> associated with the type.</p>\n"
      }
    },
    {
      "name": "InferTarget",
      "type": "InferTarget<TTarget>",
      "isDefaultExport": false,
      "comment": {
        "raw": "/**\n * Resolves a target object to a type that represents the same structure, but with all values replaced with the corresponding input type that would be generated by {@link Folder.addMany | `addMany`} or {@link Folder.bindMany | `bindMany`}.  @template TTarget - The target object being used to generate inputs.\n */",
        "links": [
          {
            "target": "Folder",
            "text": "`addMany`"
          },
          {
            "target": "Folder",
            "text": "`bindMany`"
          }
        ],
        "summary": "<p>Resolves a target object to a type that represents the same structure, but with all values\nreplaced with the corresponding input type that would be generated by\n<a href=\"#Folder.addMany%7C%60addMany%60\">Folder.addMany|<code>addMany</code></a> or <a href=\"#Folder.bindMany%7C%60bindMany%60\">Folder.bindMany|<code>bindMany</code></a>.\n@template TTarget - The target object being used to generate inputs.</p>\n"
      }
    },
    {
      "name": "InferTargetOptions",
      "type": "InferTargetOptions<TTarget>",
      "isDefaultExport": false,
      "comment": {
        "raw": "/**\n * Resolves a target object to a type that represents the same structure, but with all values replaced with the corresponding input options type accepted by the input type that would be  @template TTarget - The target object being used to generate inputs.\n *\n * @example\n * ```typescript\n * const target = { foo: 5, bar: 'baz' }\n * // The inferred result:\n * type TargetOptions = InferTargetOptions<typeof target>\n * // Generates:\n * \tfoo: NumberInputOptions,\n * \tbar: TextInputOptions,\n * }\n * ```\n *\n */",
        "summary": "<p>Resolves a target object to a type that represents the same structure, but with all values\nreplaced with the corresponding input options type accepted by the input type that would be\n@template TTarget - The target object being used to generate inputs.</p>\n",
        "examples": [
          {
            "content": "```typescript\nconst target = { foo: 5, bar: 'baz' }\n// The inferred result:\ntype TargetOptions = InferTargetOptions<typeof target>\n// Generates:\n\tfoo: NumberInputOptions,\n\tbar: TextInputOptions,\n}\n```",
            "blocks": [
              {
                "type": "code",
                "content": "<pre class=\"shiki serendipity\" style=\"background-color:#0000;color:#d4d4d4\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#5BA2D0\">const</span><span style=\"color:#DEE0EF\"> target</span><span style=\"color:#5BA2D0\"> =</span><span style=\"color:#8D8F9E\"> {</span><span style=\"color:#777D8F\"> foo</span><span style=\"color:#8D8F9E\">:</span><span style=\"color:#F8D2C9\"> 5</span><span style=\"color:#8D8F9E\">,</span><span style=\"color:#777D8F\"> bar</span><span style=\"color:#8D8F9E\">:</span><span style=\"color:#A78BFA\"> 'baz'</span><span style=\"color:#8D8F9E\"> }</span></span>\n<span class=\"line\"><span style=\"color:#8D8F9E;font-style:italic\">//</span><span style=\"color:#6B6D7C;font-style:italic\"> The inferred result:</span></span>\n<span class=\"line\"><span style=\"color:#5BA2D0\">type</span><span style=\"color:#94B8FF\"> TargetOptions</span><span style=\"color:#5BA2D0\"> =</span><span style=\"color:#94B8FF\"> InferTargetOptions</span><span style=\"color:#8D8F9E\">&#x3C;</span><span style=\"color:#5BA2D0\">typeof</span><span style=\"color:#DEE0EF\"> target</span><span style=\"color:#8D8F9E\">></span></span>\n<span class=\"line\"><span style=\"color:#8D8F9E;font-style:italic\">//</span><span style=\"color:#6B6D7C;font-style:italic\"> Generates:</span></span>\n<span class=\"line\"><span style=\"color:#94B8FF\">    foo</span><span style=\"color:#5BA2D0\">:</span><span style=\"color:#94B8FF\"> NumberInputOptions</span><span style=\"color:#777D8F\">,</span></span>\n<span class=\"line\"><span style=\"color:#94B8FF\">    bar</span><span style=\"color:#5BA2D0\">:</span><span style=\"color:#94B8FF\"> TextInputOptions</span><span style=\"color:#777D8F\">,</span></span>\n<span class=\"line\"><span style=\"color:#777D8F\">}</span></span></code></pre>",
                "lang": "typescript",
                "raw": "const target = { foo: 5, bar: 'baz' }\n// The inferred result:\ntype TargetOptions = InferTargetOptions<typeof target>\n// Generates:\n    foo: NumberInputOptions,\n    bar: TextInputOptions,\n}",
                "title": ""
              }
            ]
          }
        ]
      }
    },
    {
      "name": "FolderOptions",
      "type": "FolderOptions",
      "isDefaultExport": false
    },
    {
      "name": "InternalFolderOptions",
      "type": "InternalFolderOptions",
      "isDefaultExport": false,
      "comment": {
        "raw": "/**\n * @internal\n */",
        "summary": "",
        "internal": true
      }
    },
    {
      "name": "FolderPreset",
      "type": "FolderPreset",
      "isDefaultExport": false,
      "comment": {
        "raw": "/**\n * A folder preset stores the state of a folder and all of its inputs, as well as the state of all child folders and their inputs.\n */",
        "summary": "<p>A folder preset stores the state of a folder and all of its inputs, as well as the state of all\nchild folders and their inputs.</p>\n"
      }
    },
    {
      "name": "FolderElements",
      "type": "FolderElements",
      "isDefaultExport": false
    },
    {
      "name": "FolderEvents",
      "type": "FolderEvents",
      "isDefaultExport": false
    },
    {
      "name": "Folder",
      "type": "Folder",
      "isDefaultExport": false,
      "comment": {
        "raw": "/**\n * Folder is a container for organizing and grouping {@link Input | Inputs} and child Folders.\n *\n * This class should not be instantiated directly. Instead, use the {@link Gooey.addFolder} method.\n *\n * @example\n * ```typescript\n * const gooey = new Gooey()\n * const folder = gooey.addFolder({ title: 'My Folder' })\n * folder.addNumber({ title: 'foo', value: 5 })\n * ```\n *\n */",
        "links": [
          {
            "target": "Input",
            "text": "Inputs"
          },
          {
            "target": "Gooey",
            "text": "Gooey"
          }
        ],
        "summary": "<p>Folder is a container for organizing and grouping <a href=\"#Input%7CInputs\">Input|Inputs</a> and child Folders.</p>\n<p>This class should not be instantiated directly. Instead, use the <a href=\"#Gooey.addFolder\">Gooey.addFolder</a> method.</p>\n",
        "examples": [
          {
            "content": "```typescript\nconst gooey = new Gooey()\nconst folder = gooey.addFolder({ title: 'My Folder' })\nfolder.addNumber({ title: 'foo', value: 5 })\n```",
            "blocks": [
              {
                "type": "code",
                "content": "<pre class=\"shiki serendipity\" style=\"background-color:#0000;color:#d4d4d4\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#5BA2D0\">const</span><span style=\"color:#DEE0EF\"> gooey</span><span style=\"color:#5BA2D0\"> =</span><span style=\"color:#5BA2D0\"> new</span><span style=\"color:#F8D2C9\"> Gooey</span><span style=\"color:#DEE0EF\">()</span></span>\n<span class=\"line\"><span style=\"color:#5BA2D0\">const</span><span style=\"color:#DEE0EF\"> folder</span><span style=\"color:#5BA2D0\"> =</span><span style=\"color:#DEE0EF\"> gooey</span><span style=\"color:#5BA2D0\">.</span><span style=\"color:#F8D2C9\">addFolder</span><span style=\"color:#DEE0EF\">(</span><span style=\"color:#8D8F9E\">{</span><span style=\"color:#777D8F\"> title</span><span style=\"color:#8D8F9E\">:</span><span style=\"color:#A78BFA\"> 'My Folder'</span><span style=\"color:#8D8F9E\"> }</span><span style=\"color:#DEE0EF\">)</span></span>\n<span class=\"line\"><span style=\"color:#DEE0EF\">folder</span><span style=\"color:#5BA2D0\">.</span><span style=\"color:#F8D2C9\">addNumber</span><span style=\"color:#DEE0EF\">(</span><span style=\"color:#8D8F9E\">{</span><span style=\"color:#777D8F\"> title</span><span style=\"color:#8D8F9E\">:</span><span style=\"color:#A78BFA\"> 'foo'</span><span style=\"color:#8D8F9E\">,</span><span style=\"color:#777D8F\"> value</span><span style=\"color:#8D8F9E\">:</span><span style=\"color:#F8D2C9\"> 5</span><span style=\"color:#8D8F9E\"> }</span><span style=\"color:#DEE0EF\">)</span></span></code></pre>",
                "lang": "typescript",
                "raw": "const gooey = new Gooey()\nconst folder = gooey.addFolder({ title: 'My Folder' })\nfolder.addNumber({ title: 'foo', value: 5 })",
                "title": ""
              }
            ]
          }
        ]
      }
    }
  ]
}