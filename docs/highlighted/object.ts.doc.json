{
  "type": "ts",
  "fileName": "object.ts",
  "filePath": "src/shared/object.ts",
  "exports": [
    {
      "name": "entries",
      "type": "typeof entries",
      "isDefaultExport": false,
      "comment": {
        "raw": "/**\n * A type-preserving version of `Object.entries`.\n *\n * @param obj - Any object.\n *\n * @returns An array of key-value pairs with their types preserved.\n *\n * @example\n *\n * Immutable\n * ```ts\n * const foo2 = { a: 1, b: '✨' } as const\n * entries(foo2) // (['a', 1] | ['b', '✨'])[]\n * Object.entries(foo2) // [string, 1 | '✨'][]\n * ```\n *\n * @example\n *\n * Mutable\n * ```ts\n * const foo1 = { a: 1, b: '✨' }\n * entries(foo1) // ['a', number] | ['b', string])[]\n * Object.entries(foo1) // [string, string | number][]\n * ```\n *\n */",
        "summary": "<p>A type-preserving version of <code>Object.entries</code>.</p>\n",
        "params": [
          {
            "name": "obj",
            "description": "Any object."
          }
        ],
        "returns": "An array of key-value pairs with their types preserved.",
        "examples": [
          {
            "name": "Immutable",
            "content": "\n```ts\nconst foo2 = { a: 1, b: '✨' } as const\nentries(foo2) // (['a', 1] | ['b', '✨'])[]\nObject.entries(foo2) // [string, 1 | '✨'][]\n```",
            "blocks": [
              {
                "type": "code",
                "content": "<pre class=\"shiki serendipity\" style=\"background-color:#0000;color:#d4d4d4\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#5BA2D0\">const</span><span style=\"color:#DEE0EF\"> foo2</span><span style=\"color:#5BA2D0\"> =</span><span style=\"color:#8D8F9E\"> {</span><span style=\"color:#777D8F\"> a</span><span style=\"color:#8D8F9E\">:</span><span style=\"color:#F8D2C9\"> 1</span><span style=\"color:#8D8F9E\">,</span><span style=\"color:#777D8F\"> b</span><span style=\"color:#8D8F9E\">:</span><span style=\"color:#A78BFA\"> '✨'</span><span style=\"color:#8D8F9E\"> }</span><span style=\"color:#5BA2D0\"> as</span><span style=\"color:#5BA2D0\"> const</span></span>\n<span class=\"line\"><span style=\"color:#F8D2C9\">entries</span><span style=\"color:#DEE0EF\">(foo2)</span><span style=\"color:#8D8F9E;font-style:italic\"> //</span><span style=\"color:#6B6D7C;font-style:italic\"> (['a', 1] | ['b', '✨'])[]</span></span>\n<span class=\"line\"><span style=\"color:#DEE0EF\">Object</span><span style=\"color:#5BA2D0\">.</span><span style=\"color:#F8D2C9\">entries</span><span style=\"color:#DEE0EF\">(foo2)</span><span style=\"color:#8D8F9E;font-style:italic\"> //</span><span style=\"color:#6B6D7C;font-style:italic\"> [string, 1 | '✨'][]</span></span></code></pre>",
                "lang": "ts",
                "raw": "const foo2 = { a: 1, b: '✨' } as const\nentries(foo2) // (['a', 1] | ['b', '✨'])[]\nObject.entries(foo2) // [string, 1 | '✨'][]",
                "title": ""
              }
            ]
          },
          {
            "name": "Mutable",
            "content": "\n```ts\nconst foo1 = { a: 1, b: '✨' }\nentries(foo1) // ['a', number] | ['b', string])[]\nObject.entries(foo1) // [string, string | number][]\n```",
            "blocks": [
              {
                "type": "code",
                "content": "<pre class=\"shiki serendipity\" style=\"background-color:#0000;color:#d4d4d4\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#5BA2D0\">const</span><span style=\"color:#DEE0EF\"> foo1</span><span style=\"color:#5BA2D0\"> =</span><span style=\"color:#8D8F9E\"> {</span><span style=\"color:#777D8F\"> a</span><span style=\"color:#8D8F9E\">:</span><span style=\"color:#F8D2C9\"> 1</span><span style=\"color:#8D8F9E\">,</span><span style=\"color:#777D8F\"> b</span><span style=\"color:#8D8F9E\">:</span><span style=\"color:#A78BFA\"> '✨'</span><span style=\"color:#8D8F9E\"> }</span></span>\n<span class=\"line\"><span style=\"color:#F8D2C9\">entries</span><span style=\"color:#DEE0EF\">(foo1)</span><span style=\"color:#8D8F9E;font-style:italic\"> //</span><span style=\"color:#6B6D7C;font-style:italic\"> ['a', number] | ['b', string])[]</span></span>\n<span class=\"line\"><span style=\"color:#DEE0EF\">Object</span><span style=\"color:#5BA2D0\">.</span><span style=\"color:#F8D2C9\">entries</span><span style=\"color:#DEE0EF\">(foo1)</span><span style=\"color:#8D8F9E;font-style:italic\"> //</span><span style=\"color:#6B6D7C;font-style:italic\"> [string, string | number][]</span></span></code></pre>",
                "lang": "ts",
                "raw": "const foo1 = { a: 1, b: '✨' }\nentries(foo1) // ['a', number] | ['b', string])[]\nObject.entries(foo1) // [string, string | number][]",
                "title": ""
              }
            ]
          }
        ]
      }
    },
    {
      "name": "keys",
      "type": "typeof keys",
      "isDefaultExport": false,
      "comment": {
        "raw": "/**\n * A type-preserving version of `Object.keys`.\n *\n * @param obj - Any object.\n *\n * @returns An array of the keys with their types preserved.\n *\n * @example\n *\n * Immutable\n * ```ts\n * const foo2 = { a: 1, b: '✨' } as const\n * keys(foo2) // ('a' | 'b')[]\n * Object.keys(foo2) // string[]\n * ```\n *\n * @example\n *\n * Mutable\n * ```ts\n * const foo1 = { a: 1, b: '✨' }\n * keys(foo1) // readonly ('a' | 'b')[]\n * Object.keys(foo1) // string[]\n * ```\n *\n */",
        "summary": "<p>A type-preserving version of <code>Object.keys</code>.</p>\n",
        "params": [
          {
            "name": "obj",
            "description": "Any object."
          }
        ],
        "returns": "An array of the keys with their types preserved.",
        "examples": [
          {
            "name": "Immutable",
            "content": "\n```ts\nconst foo2 = { a: 1, b: '✨' } as const\nkeys(foo2) // ('a' | 'b')[]\nObject.keys(foo2) // string[]\n```",
            "blocks": [
              {
                "type": "code",
                "content": "<pre class=\"shiki serendipity\" style=\"background-color:#0000;color:#d4d4d4\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#5BA2D0\">const</span><span style=\"color:#DEE0EF\"> foo2</span><span style=\"color:#5BA2D0\"> =</span><span style=\"color:#8D8F9E\"> {</span><span style=\"color:#777D8F\"> a</span><span style=\"color:#8D8F9E\">:</span><span style=\"color:#F8D2C9\"> 1</span><span style=\"color:#8D8F9E\">,</span><span style=\"color:#777D8F\"> b</span><span style=\"color:#8D8F9E\">:</span><span style=\"color:#A78BFA\"> '✨'</span><span style=\"color:#8D8F9E\"> }</span><span style=\"color:#5BA2D0\"> as</span><span style=\"color:#5BA2D0\"> const</span></span>\n<span class=\"line\"><span style=\"color:#F8D2C9\">keys</span><span style=\"color:#DEE0EF\">(foo2)</span><span style=\"color:#8D8F9E;font-style:italic\"> //</span><span style=\"color:#6B6D7C;font-style:italic\"> ('a' | 'b')[]</span></span>\n<span class=\"line\"><span style=\"color:#DEE0EF\">Object</span><span style=\"color:#5BA2D0\">.</span><span style=\"color:#F8D2C9\">keys</span><span style=\"color:#DEE0EF\">(foo2)</span><span style=\"color:#8D8F9E;font-style:italic\"> //</span><span style=\"color:#6B6D7C;font-style:italic\"> string[]</span></span></code></pre>",
                "lang": "ts",
                "raw": "const foo2 = { a: 1, b: '✨' } as const\nkeys(foo2) // ('a' | 'b')[]\nObject.keys(foo2) // string[]",
                "title": ""
              }
            ]
          },
          {
            "name": "Mutable",
            "content": "\n```ts\nconst foo1 = { a: 1, b: '✨' }\nkeys(foo1) // readonly ('a' | 'b')[]\nObject.keys(foo1) // string[]\n```",
            "blocks": [
              {
                "type": "code",
                "content": "<pre class=\"shiki serendipity\" style=\"background-color:#0000;color:#d4d4d4\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#5BA2D0\">const</span><span style=\"color:#DEE0EF\"> foo1</span><span style=\"color:#5BA2D0\"> =</span><span style=\"color:#8D8F9E\"> {</span><span style=\"color:#777D8F\"> a</span><span style=\"color:#8D8F9E\">:</span><span style=\"color:#F8D2C9\"> 1</span><span style=\"color:#8D8F9E\">,</span><span style=\"color:#777D8F\"> b</span><span style=\"color:#8D8F9E\">:</span><span style=\"color:#A78BFA\"> '✨'</span><span style=\"color:#8D8F9E\"> }</span></span>\n<span class=\"line\"><span style=\"color:#F8D2C9\">keys</span><span style=\"color:#DEE0EF\">(foo1)</span><span style=\"color:#8D8F9E;font-style:italic\"> //</span><span style=\"color:#6B6D7C;font-style:italic\"> readonly ('a' | 'b')[]</span></span>\n<span class=\"line\"><span style=\"color:#DEE0EF\">Object</span><span style=\"color:#5BA2D0\">.</span><span style=\"color:#F8D2C9\">keys</span><span style=\"color:#DEE0EF\">(foo1)</span><span style=\"color:#8D8F9E;font-style:italic\"> //</span><span style=\"color:#6B6D7C;font-style:italic\"> string[]</span></span></code></pre>",
                "lang": "ts",
                "raw": "const foo1 = { a: 1, b: '✨' }\nkeys(foo1) // readonly ('a' | 'b')[]\nObject.keys(foo1) // string[]",
                "title": ""
              }
            ]
          }
        ]
      }
    },
    {
      "name": "values",
      "type": "typeof values",
      "isDefaultExport": false,
      "comment": {
        "raw": "/**\n * A type-preserving version of `Object.values`.\n *\n * @param obj - Any object.\n *\n * @returns An array of values with their types preserved.\n *\n * @example\n *\n * Immutable\n * ```ts\n * const foo2 = { a: 1, b: '✨' } as const\n * values(foo2) // (1 | '✨')[]\n * Object.values(foo2) // (1 | '✨')[]\n * ```\n *\n * @example\n *\n * Mutable\n * ```ts\n * const foo1 = { a: 1, b: '✨' }\n * values(foo1) // readonly (number | string)[]\n * Object.values(foo1) // (number | string)[]\n * ```\n *\n */",
        "summary": "<p>A type-preserving version of <code>Object.values</code>.</p>\n",
        "params": [
          {
            "name": "obj",
            "description": "Any object."
          }
        ],
        "returns": "An array of values with their types preserved.",
        "examples": [
          {
            "name": "Immutable",
            "content": "\n```ts\nconst foo2 = { a: 1, b: '✨' } as const\nvalues(foo2) // (1 | '✨')[]\nObject.values(foo2) // (1 | '✨')[]\n```",
            "blocks": [
              {
                "type": "code",
                "content": "<pre class=\"shiki serendipity\" style=\"background-color:#0000;color:#d4d4d4\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#5BA2D0\">const</span><span style=\"color:#DEE0EF\"> foo2</span><span style=\"color:#5BA2D0\"> =</span><span style=\"color:#8D8F9E\"> {</span><span style=\"color:#777D8F\"> a</span><span style=\"color:#8D8F9E\">:</span><span style=\"color:#F8D2C9\"> 1</span><span style=\"color:#8D8F9E\">,</span><span style=\"color:#777D8F\"> b</span><span style=\"color:#8D8F9E\">:</span><span style=\"color:#A78BFA\"> '✨'</span><span style=\"color:#8D8F9E\"> }</span><span style=\"color:#5BA2D0\"> as</span><span style=\"color:#5BA2D0\"> const</span></span>\n<span class=\"line\"><span style=\"color:#F8D2C9\">values</span><span style=\"color:#DEE0EF\">(foo2)</span><span style=\"color:#8D8F9E;font-style:italic\"> //</span><span style=\"color:#6B6D7C;font-style:italic\"> (1 | '✨')[]</span></span>\n<span class=\"line\"><span style=\"color:#DEE0EF\">Object</span><span style=\"color:#5BA2D0\">.</span><span style=\"color:#F8D2C9\">values</span><span style=\"color:#DEE0EF\">(foo2)</span><span style=\"color:#8D8F9E;font-style:italic\"> //</span><span style=\"color:#6B6D7C;font-style:italic\"> (1 | '✨')[]</span></span></code></pre>",
                "lang": "ts",
                "raw": "const foo2 = { a: 1, b: '✨' } as const\nvalues(foo2) // (1 | '✨')[]\nObject.values(foo2) // (1 | '✨')[]",
                "title": ""
              }
            ]
          },
          {
            "name": "Mutable",
            "content": "\n```ts\nconst foo1 = { a: 1, b: '✨' }\nvalues(foo1) // readonly (number | string)[]\nObject.values(foo1) // (number | string)[]\n```",
            "blocks": [
              {
                "type": "code",
                "content": "<pre class=\"shiki serendipity\" style=\"background-color:#0000;color:#d4d4d4\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#5BA2D0\">const</span><span style=\"color:#DEE0EF\"> foo1</span><span style=\"color:#5BA2D0\"> =</span><span style=\"color:#8D8F9E\"> {</span><span style=\"color:#777D8F\"> a</span><span style=\"color:#8D8F9E\">:</span><span style=\"color:#F8D2C9\"> 1</span><span style=\"color:#8D8F9E\">,</span><span style=\"color:#777D8F\"> b</span><span style=\"color:#8D8F9E\">:</span><span style=\"color:#A78BFA\"> '✨'</span><span style=\"color:#8D8F9E\"> }</span></span>\n<span class=\"line\"><span style=\"color:#F8D2C9\">values</span><span style=\"color:#DEE0EF\">(foo1)</span><span style=\"color:#8D8F9E;font-style:italic\"> //</span><span style=\"color:#6B6D7C;font-style:italic\"> readonly (number | string)[]</span></span>\n<span class=\"line\"><span style=\"color:#DEE0EF\">Object</span><span style=\"color:#5BA2D0\">.</span><span style=\"color:#F8D2C9\">values</span><span style=\"color:#DEE0EF\">(foo1)</span><span style=\"color:#8D8F9E;font-style:italic\"> //</span><span style=\"color:#6B6D7C;font-style:italic\"> (number | string)[]</span></span></code></pre>",
                "lang": "ts",
                "raw": "const foo1 = { a: 1, b: '✨' }\nvalues(foo1) // readonly (number | string)[]\nObject.values(foo1) // (number | string)[]",
                "title": ""
              }
            ]
          }
        ]
      }
    }
  ]
}