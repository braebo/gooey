{"version":3,"file":"select.js","sources":["../../../../src/shared/select.ts"],"sourcesContent":["import { DEV } from 'esm-env'\n\nexport type ElementOrSelector = string | HTMLElement | undefined | 'document' | 'window'\nexport type ElementsOrSelectors = ElementOrSelector | ElementOrSelector[]\n\n/**\n * Takes in any combination of selectors and elements, and\n * resolves them all into an array of HTMLElements.\n * @param input - The elements or selectors to resolve.\n * @param node - The node to search within. Default: `document.documentElement`\n * @example\n * select('div') \t\t\t// -> [HTMLDivElement, HTMLDivElement, ...]\n * select(['div', 'span']) \t// -> [HTMLDivElement, HTMLSpanElement, ...]\n * select('#my-id') \t\t// -> [HTMLElement]\n * const el = document.getElementById('my-id')\n * select(el) \t\t\t\t// -> [HTMLElement]\n * select([el]) \t\t\t// -> [HTMLElement]\n * select(undefined)\t\t// -> []\n * select('document')\t\t// -> [HTMLHtmlElement]\n * select('window')\t\t\t// -> [HTMLHtmlElement]\n */\nexport function select(\n\t/**\n\t * The elements or selectors to resolve.\n\t */\n\tinput: ElementsOrSelectors,\n\t/**\n\t * The node to search within.\n\t * @default document.documentElement\n\t */\n\tnode?: HTMLElement,\n): HTMLElement[] {\n\tif (typeof window === 'undefined') return []\n\n\tif (input === undefined) return []\n\n\tconst elements = Array.isArray(input) ? input : [input]\n\n\tnode ??= document.documentElement\n\n\treturn elements.flatMap((el): HTMLElement[] => {\n\t\tif (!el) return []\n\n\t\tif (el instanceof HTMLElement) return [el]\n\t\t// @ts-expect-error - (document instanceof Document) is always `true`... so this is fine.\n\t\tif (el instanceof Document) {\n\t\t\treturn [document.documentElement]\n\t\t}\n\n\t\tif (typeof el === 'string') {\n\t\t\tif (el === 'document' || el === 'window') return [document.documentElement]\n\t\t\tif (el.startsWith('#')) {\n\t\t\t\tconst foundEl = document.getElementById(JSON.stringify(el).slice(1))\n\t\t\t\tif (foundEl) {\n\t\t\t\t\treturn [foundEl]\n\t\t\t\t} else {\n\t\t\t\t\tif (DEV) {\n\t\t\t\t\t\tconsole.warn(`No element found width id: `, el)\n\t\t\t\t\t\tconsole.warn(`Make sure the selector is a child of the target node.`)\n\t\t\t\t\t\tconsole.warn({ input, node, elements })\n\t\t\t\t\t}\n\n\t\t\t\t\treturn []\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst foundEls = node!.querySelectorAll<HTMLElement>(el)\n\t\tif (foundEls.length === 0) {\n\t\t\tif (DEV) {\n\t\t\t\tconsole.warn(`No elements found for selector:`, el)\n\t\t\t\tconsole.warn(`Make sure the selector is a child of the target node.`)\n\t\t\t\tconsole.warn({ input, node, elements })\n\t\t\t}\n\n\t\t\treturn []\n\t\t}\n\t\treturn Array.from(foundEls)\n\t})\n}\n"],"names":[],"mappings":"AAKA;;;;;;;;;;;;;;;AAeG;SACa,MAAM;AACrB;;AAEG;AACH,KAA0B;AAC1B;;;AAGG;AACH,IAAkB,EAAA;IAElB,IAAI,OAAO,MAAM,KAAK,WAAW;AAAE,QAAA,OAAO,EAAE,CAAA;IAE5C,IAAI,KAAK,KAAK,SAAS;AAAE,QAAA,OAAO,EAAE,CAAA;AAElC,IAAA,MAAM,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,CAAC,KAAK,CAAC,CAAA;AAEvD,IAAA,IAAI,KAAK,QAAQ,CAAC,eAAe,CAAA;AAEjC,IAAA,OAAO,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE,KAAmB;AAC7C,QAAA,IAAI,CAAC,EAAE;AAAE,YAAA,OAAO,EAAE,CAAA;QAElB,IAAI,EAAE,YAAY,WAAW;YAAE,OAAO,CAAC,EAAE,CAAC,CAAA;;AAE1C,QAAA,IAAI,EAAE,YAAY,QAAQ,EAAE;AAC3B,YAAA,OAAO,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAA;SACjC;AAED,QAAA,IAAI,OAAO,EAAE,KAAK,QAAQ,EAAE;AAC3B,YAAA,IAAI,EAAE,KAAK,UAAU,IAAI,EAAE,KAAK,QAAQ;AAAE,gBAAA,OAAO,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAA;AAC3E,YAAA,IAAI,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;AACvB,gBAAA,MAAM,OAAO,GAAG,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;gBACpE,IAAI,OAAO,EAAE;oBACZ,OAAO,CAAC,OAAO,CAAC,CAAA;iBAChB;qBAAM;AAON,oBAAA,OAAO,EAAE,CAAA;iBACT;aACD;SACD;QAED,MAAM,QAAQ,GAAG,IAAK,CAAC,gBAAgB,CAAc,EAAE,CAAC,CAAA;AACxD,QAAA,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;AAO1B,YAAA,OAAO,EAAE,CAAA;SACT;AACD,QAAA,OAAO,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;AAC5B,KAAC,CAAC,CAAA;AACH;;;;"}