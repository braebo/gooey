{"version":3,"file":"EventManager.js","sources":["../../../../src/shared/EventManager.ts"],"sourcesContent":["import { Logger } from './logger'\nimport { nanoid } from './nanoid'\n\nexport type EventCallback<T = any> = (...args: T[]) => void\n\n/**\n * Represents an event manager that provides methods for adding and removing event listeners.\n */\nexport class EventManager<EventMap extends Record<string, any>> {\n\tprivate _unlisteners = new Map<string, EventCallback>()\n\t/**\n\t * The event handlers for each registered custom event type, and their respective callbacks.\n\t */\n\tprivate _handlers = new Map<\n\t\tkeyof EventMap,\n\t\tMap<string, EventCallback<EventMap[keyof EventMap]>>\n\t>()\n\tprivate _listenerGroups = new Map<string, Set<string>>()\n\tprivate _log = new Logger('EventManager', { fg: 'beige' })\n\n\tconstructor(events?: Array<keyof EventMap>) {\n\t\tif (events) {\n\t\t\tthis.registerEvents([...events])\n\t\t}\n\t}\n\n\t/**\n\t * Register new event type(s) for use via {@link on}.\n\t */\n\tregisterEvents(events: Array<keyof EventMap>) {\n\t\tfor (const event of events) {\n\t\t\tthis._handlers.set(event, new Map())\n\t\t}\n\t}\n\n\t/**\n\t * Register a new event listener.\n\t * @param event - The name of the event to listen for.\n\t * @param callback - The callback function to execute when the event is fired.\n\t * @returns The ID of the listener (for use via {@link unlisten} to remove the listener).\n\t */\n\ton<K extends keyof EventMap>(event: K, callback: EventCallback<EventMap[K]>): string {\n\t\tthis._log.fn('on').debug(this)\n\n\t\tif (!this._handlers.has(event)) {\n\t\t\tthis._log.warn(`Event \"${String(event)}\" is not registered.`, this)\n\t\t\treturn ''\n\t\t}\n\n\t\tthis._log.debug('new listener:', { event, callback })\n\n\t\tconst id = nanoid()\n\t\tconst listeners = this._handlers.get(event) as Map<string, EventCallback<EventMap[K]>>\n\n\t\tlisteners.set(id, callback)\n\t\treturn id\n\t}\n\n\t/**\n\t * Emit an event to all registered listeners.\n\t * @param event - The name of the event to emit.\n\t * @param args - The arguments to pass to the event listeners.\n\t */\n\temit<K extends keyof EventMap>(event: K, ...args: EventMap[K][]) {\n\t\tthis._log.fn('emit').debug({ event })\n\t\tconst callbacks = this._handlers.get(event)\n\t\tif (callbacks) {\n\t\t\tfor (const cb of callbacks.values()) {\n\t\t\t\tcb(...args)\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Add an event listener to an HTMLElement that will be removed when {@link dispose} is called.\n\t * @param element - The element to add the listener to.\n\t * @param event - The event to listen for.\n\t * @param callback - The callback function to execute when the event is fired.\n\t * @param options - Optional event listener options.\n\t * @param groupId - Optional group ID to add the listener to (for batch removal).\n\t */\n\tlisten = <\n\t\tTTarget extends Element | Window | Document,\n\t\tTEventName extends keyof GlobalEventHandlersEventMap | (string & {}),\n\t\tTEventInstance extends TEventName extends keyof GlobalEventHandlersEventMap\n\t\t\t? GlobalEventHandlersEventMap[TEventName] & { target: TTarget }\n\t\t\t: Event,\n\t>(\n\t\telement: TTarget,\n\t\tevent: TEventName,\n\t\tcallback: (e: TEventInstance) => void,\n\t\toptions?: AddEventListenerOptions,\n\t\tgroupId?: string,\n\t) => {\n\t\tconst id = nanoid()\n\t\telement.removeEventListener(event, callback as EventCallback, options)\n\t\telement.addEventListener(event, callback as EventCallback, options)\n\t\tthis._unlisteners.set(id, () => {\n\t\t\telement.removeEventListener(event, callback as EventCallback, options)\n\t\t})\n\n\t\tif (groupId) this.group(groupId, id)\n\n\t\treturn id\n\t}\n\n\t/**\n\t * Add a listener to the event manager without attaching it to an element.\n\t * @param cb - The callback function to execute when the event is fired.\n\t * @param groupId - Optional group ID to add the listener to (for batch\n\t * removal via {@link clearGroup}).\n\t * @returns The ID generated for the listener (for removal via {@link unlisten}).\n\t */\n\tadd = (cb: () => void, groupId?: string) => {\n\t\tconst id = nanoid()\n\t\tthis._unlisteners.set(id, cb)\n\n\t\tif (groupId) this.group(groupId, id)\n\n\t\treturn id\n\t}\n\n\t/**\n\t * Add a listener to a group by id, enabling batch removal via {@link clearGroup}.\n\t * @param groupId - The ID of the group to add the listener ID to.\n\t * @param listenerId - The ID of the listener to add to the group.\n\t */\n\tgroup(groupId: string, listenerId: string) {\n\t\tif (!this._listenerGroups.has(groupId)) {\n\t\t\tthis._listenerGroups.set(groupId, new Set())\n\t\t}\n\t\tthis._listenerGroups.get(groupId)!.add(listenerId)\n\t\treturn this\n\t}\n\n\t/**\n\t * Call the listener callback with the specified ID, then remove it.\n\t * @param id - The ID of the listener to remove.\n\t * @returns `true` if the listener was removed, `false` if it was not found.\n\t */\n\tunlisten(id: string): boolean {\n\t\tthis._unlisteners.get(id)?.()\n\t\treturn this._unlisteners.delete(id)\n\t}\n\n\t/**\n\t * Calls all cleanup callbacks and clears the event manager.\n\t */\n\tclear() {\n\t\tfor (const cb of this._unlisteners.values()) cb()\n\t\tthis._unlisteners.clear()\n\t\tthis._listenerGroups.clear()\n\t\tthis.clearHandlers()\n\t\treturn this\n\t}\n\n\t/**\n\t * Remove all registered event handlers.\n\t */\n\tclearHandlers() {\n\t\tfor (const listeners of this._handlers.values()) listeners.clear()\n\t\tthis._handlers.clear()\n\t\treturn this\n\t}\n\n\t/**\n\t * Remove all listeners in a group by ID.\n\t * @param groupId - The ID of the group to clear.\n\t */\n\tclearGroup(groupId: string) {\n\t\tconst group = this._listenerGroups.get(groupId)\n\t\tif (group) {\n\t\t\tfor (const id of group) {\n\t\t\t\tconst cb = this._unlisteners.get(id)\n\t\t\t\tif (cb) cb()\n\t\t\t\tthis._unlisteners.delete(id)\n\t\t\t}\n\t\t\tthis._listenerGroups.delete(groupId)\n\t\t}\n\t\treturn this\n\t}\n\n\t/**\n\t * Removes all registered listeners.\n\t */\n\tdispose(): void {\n\t\tthis.clear()\n\t\tthis.clearHandlers()\n\t}\n}\n"],"names":[],"mappings":"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"}