{"version":3,"file":"color.js","sources":["../../../../../src/shared/color/color.ts"],"sourcesContent":["import type { ColorFormat } from './types/colorFormat'\n\nimport type {\n\tColorObject,\n\tHslColor,\n\tHslaColor,\n\tHsvColor,\n\tHsvaColor,\n\tRgbColor,\n\tRgbaColor,\n} from './types/objects'\n\nimport type {\n\tColorString,\n\tHexAlphaString,\n\tHexString,\n\tHslString,\n\tHslaString,\n\tRgbString,\n\tRgbaString,\n} from './types/strings'\n\nimport {\n\tREGEX_FUNCTIONAL_RGB,\n\tREGEX_FUNCTIONAL_RGBA,\n\tREGEX_FUNCTIONAL_HSL,\n\tREGEX_FUNCTIONAL_HSLA,\n\tREGEX_HEX_3,\n\tREGEX_HEX_4,\n\tREGEX_HEX_6,\n\tREGEX_HEX_8,\n} from './regex'\n\nimport { kelvinToRgb } from './conversions/kelvinToRgb'\nimport { rgbToKelvin } from './conversions/rgbToKelvin'\nimport { rgbToHsv } from './conversions/rgbToHsv'\nimport { hslToHsv } from './conversions/hslToHsv'\nimport { hsvToHsl } from './conversions/hsvToHsl'\nimport { hsvToRgb } from './conversions/hsvToRgb'\n\nimport { parseHexInt } from './conversions/parseHexInt'\nimport { parseUnit } from './conversions/parseUnit'\nimport { intToHex } from './conversions/intToHex'\n\nexport type ColorMode = 'hsv' | 'hsl' | 'rgb'\n\nexport type ColorValue = Color | ColorString | ColorObject\n\nconst DEFAULT_COLOR = { h: 0, s: 0, v: 0, a: 1 }\n\n/**\n * A color class with rgb, hsl, hsv, and kelvin color objects, strings, and conversion methods.\n */\nexport class Color {\n\treadonly isColor = true as const\n\n\t#hsva: HsvaColor // The primary internal color value (source of truth).\n\treadonly #initialValue: HsvaColor\n\n\t/**\n\t * @param color - The initial color value.\n\t * The value can be any valid color representation:\n\t * - A hex string: '#5500ee' | '#5500eeff'\n\t * - An rgba string: 'rgba(85, 0, 238, 1)' | 'rgba(85, 0, 238, 1.0)'\n\t * - An hsla string: 'hsla(261, 100%, 47%, 1)' | 'hsla(261, 100%, 47%, 1.0)'\n\t * - An {@link RgbvColor}: { r: 85, g: 0, b: 238, a: 1 }\n\t * - An {@link HsvColor}: { h: 261, s: 100, v: 47, a: 1 }\n\t * - An {@link HslColor}: { h: 261, s: 100, l: 47, a: 1 }\n\t * - An {@link KelvinColor}: { kelvin: 6500 }\n\t */\n\tconstructor(color?: ColorValue | (string & {})) {\n\t\tthis.#hsva = DEFAULT_COLOR\n\n\t\tif (color) this.set(color as ColorValue)\n\n\t\tthis.#initialValue = structuredClone(this.#hsva)\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Sets the Color from any valid {@link ColorValue}.\n\t */\n\tset(color: ColorValue) {\n\t\tif (typeof color === 'string') {\n\t\t\tif (/^(?:#?|0x?)[0-9a-fA-F]{3,8}$/.test(color as string)) {\n\t\t\t\tthis.hexString = color as HexString\n\t\t\t} else if (/^rgba?/.test(color as string)) {\n\t\t\t\tthis.rgbString = color as RgbaString\n\t\t\t} else if (/^hsla?/.test(color as string)) {\n\t\t\t\tthis.hslString = color as HslaString\n\t\t\t}\n\t\t} else if (typeof color === 'object') {\n\t\t\tif (color instanceof Color) {\n\t\t\t\tthis.hsva = color.hsva\n\t\t\t} else if ('r' in color && 'g' in color && 'b' in color) {\n\t\t\t\tthis.rgb = color as RgbColor\n\t\t\t} else if ('h' in color && 's' in color && 'v' in color) {\n\t\t\t\tthis.hsv = color\n\t\t\t} else if ('h' in color && 's' in color && 'l' in color) {\n\t\t\t\tthis.hsl = color as HslColor\n\t\t\t} else if ('kelvin' in color) {\n\t\t\t\tthis.kelvin = color.kelvin as number\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error('Invalid color value: ' + color)\n\t\t}\n\t}\n\n\t/**\n\t * Shortcut to set a specific channel value.\n\t * @param format - hsv | hsl | rgb\n\t * @param channel - Individual channel to set, for example, if format = hsl, chanel = h | s | l\n\t * @param value - New value for the channel.\n\t */\n\tsetChannel<Mode extends ColorMode>(\n\t\tformat: Mode,\n\t\t// prettier-ignore\n\t\tchannel: Mode extends 'hsv'\n\t\t\t? 'h' | 's' | 'v'\n\t\t\t: Mode extends 'hsl'\n\t\t\t\t? 'h' | 's' | 'l'\n\t\t\t\t: Mode extends 'rgb'\n\t\t\t\t\t? 'r' | 'g' | 'b'\n\t\t\t\t\t: never,\n\t\tvalue: number,\n\t) {\n\t\tthis[format] = { ...this[format], [channel]: value }\n\t}\n\n\t/**\n\t * Reset color back to its initial value\n\t */\n\treset() {\n\t\tthis.hsva = this.#initialValue\n\t}\n\n\t/**\n\t * Returns a new Color instance with the same values as this one.\n\t */\n\tclone() {\n\t\treturn new Color(this)\n\t}\n\n\t/** i.e. `{ h: 261, s: 100, v: 47 }` */\n\tget hsv(): HsvColor {\n\t\tconst { h, s, v } = this.#hsva\n\t\treturn { h, s, v }\n\t}\n\n\t// All other setters go through this one.\n\tset hsv(value: Partial<HsvaColor>) {\n\t\tconst oldValue = this.#hsva\n\n\t\tconst mergedValue = { ...oldValue, ...value }\n\n\t\tif (\n\t\t\tthis.#hsva.h === mergedValue.h &&\n\t\t\tthis.#hsva.s === mergedValue.s &&\n\t\t\tthis.#hsva.v === mergedValue.v &&\n\t\t\tthis.#hsva.a === mergedValue.a\n\t\t) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.#hsva = {\n\t\t\th: Math.round(mergedValue.h),\n\t\t\ts: Math.round(mergedValue.s),\n\t\t\tv: Math.round(mergedValue.v),\n\t\t\ta: mergedValue.a,\n\t\t}\n\n\t\t// this.#hsva = mergedValue\n\t}\n\n\t/** i.e. `{ h: 261, s: 100, v: 47, a: 1 }` */\n\tget hsva(): HsvaColor {\n\t\treturn structuredClone(this.#hsva)\n\t}\n\tset hsva(value: HsvaColor) {\n\t\tthis.hsv = value\n\t}\n\n\t/** The value of `H` in `HSVA`. */\n\tget hue(): number {\n\t\treturn this.#hsva.h\n\t}\n\tset hue(value: number) {\n\t\tthis.hsv = { h: value }\n\t}\n\n\t/** The value of `S` in `HSVA`. */\n\tget saturation(): number {\n\t\treturn this.#hsva.s\n\t}\n\tset saturation(value: number) {\n\t\tthis.hsv = { s: value }\n\t}\n\n\t/** The value of `V` in `HSVA`. */\n\tget value(): number {\n\t\treturn this.#hsva.v\n\t}\n\tset value(value: number) {\n\t\tthis.hsv = { v: value }\n\t}\n\n\t/** The value of `L` in `HSLA`. */\n\tget lightness(): number {\n\t\treturn this.hsl.l\n\t}\n\tset lightness(value: number) {\n\t\tthis.hsl = { ...this.hsl, l: value }\n\t}\n\n\tget alpha(): number {\n\t\treturn this.#hsva.a ?? 1\n\t}\n\tset alpha(value: number) {\n\t\tthis.hsv = { ...this.hsv, a: value }\n\t}\n\n\tget kelvin(): number {\n\t\treturn rgbToKelvin(this.rgb)\n\t}\n\tset kelvin(value: number) {\n\t\tthis.rgb = kelvinToRgb(value)\n\t}\n\n\tget red(): number {\n\t\treturn this.rgb.r\n\t}\n\tset red(value: number) {\n\t\tthis.rgb = { ...this.rgb, r: value }\n\t}\n\t/**\n\t * A float version of the {@link red} channel value as a fraction of 1 (0-1 vs 0-255).\n\t */\n\tget r(): number {\n\t\t// return this.red\n\t\treturn this.rgb.r / 255\n\t}\n\tset r(value: number) {\n\t\tthis.red = value * 255\n\t}\n\n\tget green(): number {\n\t\treturn this.rgb.g\n\t}\n\tset green(value: number) {\n\t\tthis.rgb = { ...this.rgb, g: value }\n\t}\n\t/**\n\t * A float version of the {@link green} channel value as a fraction of 1 (0-1 vs 0-255).\n\t */\n\tget g(): number {\n\t\t// return this.green\n\t\treturn this.rgb.g / 255\n\t}\n\tset g(value: number) {\n\t\tthis.green = value * 255\n\t}\n\n\tget blue(): number {\n\t\treturn this.rgb.b\n\t}\n\tset blue(value: number) {\n\t\tthis.rgb = { ...this.rgb, b: value }\n\t}\n\t/**\n\t * A float version of the {@link blue} channel value as a fraction of 1 (0-1 vs 0-255).\n\t */\n\tget b(): number {\n\t\treturn this.rgb.b / 255\n\t}\n\tset b(value: number) {\n\t\tthis.blue = value * 255\n\t}\n\n\t/** i.e. `{ r: 85, g: 0, b: 238 }` */\n\tget rgb(): RgbColor {\n\t\tconst { r, g, b } = hsvToRgb(this.#hsva)\n\t\treturn {\n\t\t\tr: Math.round(r),\n\t\t\tg: Math.round(g),\n\t\t\tb: Math.round(b),\n\t\t}\n\t}\n\n\tset rgb(value: RgbColor | RgbaColor) {\n\t\tthis.hsv = {\n\t\t\t...rgbToHsv(value),\n\t\t\ta: 'a' in value ? value.a : 1,\n\t\t}\n\t}\n\n\t/**\n\t * A float version of {@link rgb} values as a fraction of 1 (0-1 vs 0-255).\n\t */\n\tget rgbf(): RgbColor {\n\t\treturn {\n\t\t\tr: this.r,\n\t\t\tg: this.g,\n\t\t\tb: this.b,\n\t\t}\n\t}\n\tset rgbf(value: RgbColor) {\n\t\tthis.rgb = {\n\t\t\tr: value.r,\n\t\t\tg: value.g,\n\t\t\tb: value.b,\n\t\t}\n\t}\n\n\t/** i.e. `'rgba(85, 0, 238, 1)'` */\n\tget rgba(): RgbaColor {\n\t\treturn { ...this.rgb, a: this.alpha }\n\t}\n\tset rgba(value: RgbColor | RgbaColor) {\n\t\tthis.rgb = value\n\t}\n\n\t/** i.e. `'hsl(261, 100%, 47%)'` */\n\tget hsl(): HslColor {\n\t\tconst { h, s, l } = hsvToHsl(this.#hsva)\n\t\treturn {\n\t\t\th: Math.round(h),\n\t\t\ts: Math.round(s),\n\t\t\tl: Math.round(l),\n\t\t}\n\t}\n\tset hsl(value: HslColor | HslaColor) {\n\t\tthis.hsv = {\n\t\t\t...hslToHsv(value),\n\t\t\ta: 'a' in value ? value.a : 1,\n\t\t}\n\t}\n\n\t/** i.e. `'hsla(261, 100%, 47%, 1)'` */\n\tget hsla(): HslaColor {\n\t\treturn { ...this.hsl, a: this.alpha }\n\t}\n\tset hsla(value: HslColor | HslaColor) {\n\t\tthis.hsl = value\n\t}\n\n\t/** i.e. `'rgb(85, 0, 238)'` */\n\tget rgbString(): RgbString {\n\t\treturn `rgb(${this.rgb.r}, ${this.rgb.g}, ${this.rgb.b})`\n\t}\n\tset rgbString(value: RgbString | RgbaString | (string & {})) {\n\t\tlet match: RegExpExecArray | null\n\n\t\tlet r: number\n\t\tlet g: number\n\t\tlet b: number\n\t\tlet a = 1\n\n\t\tif ((match = REGEX_FUNCTIONAL_RGB.exec(value))) {\n\t\t\tr = parseUnit(match[1], 255)\n\t\t\tg = parseUnit(match[2], 255)\n\t\t\tb = parseUnit(match[3], 255)\n\t\t} else if ((match = REGEX_FUNCTIONAL_RGBA.exec(value))) {\n\t\t\tr = parseUnit(match[1], 255)\n\t\t\tg = parseUnit(match[2], 255)\n\t\t\tb = parseUnit(match[3], 255)\n\t\t\ta = parseUnit(match[4], 1)\n\t\t} else {\n\t\t\tthrow new Error('Invalid rgb string: ' + value)\n\t\t}\n\n\t\tthis.rgb = { r, g, b, a }\n\t}\n\n\t/** i.e. `'rgba(85, 0, 238, 1)'` */\n\tget rgbaString(): RgbaString {\n\t\tconst rgba = this.rgba\n\t\treturn `rgba(${rgba.r}, ${rgba.g}, ${rgba.b}, ${rgba.a})`\n\t}\n\tset rgbaString(value: RgbaString | (string & {})) {\n\t\tthis.rgbString = value\n\t}\n\n\t/**\n\t * Hex string with an alpha channel, i.e. `'#5500eeff'`. Identical to {@link hex8String}.\n\t */\n\tget hex(): HexString {\n\t\treturn this.hex8String\n\t}\n\t/** Hex string with no alpha channel, i.e. `'#5500ee'` */\n\tget hexString(): HexString {\n\t\tconst rgb = this.rgb\n\t\treturn `#${intToHex(rgb.r)}${intToHex(rgb.g)}${intToHex(rgb.b)}` as HexString\n\t}\n\tset hexString(value: HexString | HexAlphaString | (string & {})) {\n\t\tconst match =\n\t\t\tvalue.match(REGEX_HEX_3) ||\n\t\t\tvalue.match(REGEX_HEX_4) ||\n\t\t\tvalue.match(REGEX_HEX_6) ||\n\t\t\tvalue.match(REGEX_HEX_8)\n\n\t\tif (!match) throw new Error('Invalid hex string')\n\n\t\tconst [r, g, b, a = 255] = match\n\t\t\t.slice(1)\n\t\t\t.map(c => parseHexInt(c.length === 1 ? `${c}${c}` : c))\n\n\t\tthis.rgb = { r, g, b, a: +a / 255 }\n\t}\n\n\tget hex8(): HexAlphaString {\n\t\treturn this.hex8String\n\t}\n\t/** i.e. `'#5500eeff'` */\n\tget hex8String(): HexAlphaString {\n\t\tconst rgba = this.rgba\n\t\treturn `#${intToHex(rgba.r)}${intToHex(rgba.g)}${intToHex(rgba.b)}${intToHex(\n\t\t\tMath.floor((rgba.a ?? 1) * 255),\n\t\t)}` as HexAlphaString\n\t}\n\tset hex8String(value: HexAlphaString | (string & {})) {\n\t\tthis.hexString = value\n\t}\n\n\t/** i.e. `'rgb(85, 0, 238)'` */\n\tget hslString(): HslString {\n\t\tconst hsl = this.hsl\n\t\treturn `hsl(${hsl.h}, ${hsl.s}%, ${hsl.l}%)`\n\t}\n\tset hslString(value: HslString | (string & {})) {\n\t\tconst match = REGEX_FUNCTIONAL_HSL.exec(value) || REGEX_FUNCTIONAL_HSLA.exec(value)\n\t\tif (!match) throw new Error('Invalid rgb string: ' + value)\n\n\t\tconst [r, g, b, a = 1] = match\n\t\t\t.slice(1)\n\t\t\t.map((val, index) => parseUnit(val, index < 3 ? 255 : 1))\n\n\t\tthis.rgb = { r, g, b, a }\n\t}\n\n\t/** i.e. `'hsla(261, 100%, 47%, 1)'` */\n\tget hslaString(): string {\n\t\tconst hsla = this.hsla\n\t\treturn `hsla(${hsla.h}, ${hsla.s}%, ${hsla.l}%, ${hsla.a})`\n\t}\n\tset hslaString(value: HslaString | (string & {})) {\n\t\tthis.hslString = value\n\t}\n\n\ttoString() {\n\t\treturn this.hex8String\n\t}\n\n\ttoJSON() {\n\t\treturn {\n\t\t\tisColor: true,\n\t\t\t...this.rgba,\n\t\t\thex: this.hex8String,\n\t\t}\n\t}\n}\n\nexport function isColor(color: any): color is Color {\n\treturn !!color.isColor\n}\n\nexport function isColorFormat(color: any): color is ColorFormat {\n\treturn typeof parseColorFormat(color) !== 'undefined'\n}\n\nexport function parseColorFormat(color: ColorFormat | (string & {})) {\n\tif (typeof color === 'string') {\n\t\tif (color.match(/^#?[0-9a-fA-F]{6}$/)) {\n\t\t\treturn 'HexString' as const\n\t\t} else if (color.match(/^#?[0-9a-fA-F]{8}$/)) {\n\t\t\treturn 'Hex8String' as const\n\t\t} else if (color.match(/^rgba?/)) {\n\t\t\treturn 'RgbaString' as const\n\t\t} else if (color.match(/^hsla?/)) {\n\t\t\treturn 'HslaString' as const\n\t\t}\n\t} else if (typeof color === 'object') {\n\t\tif (color instanceof Color) {\n\t\t\treturn 'Color' as const\n\t\t} else if ('r' in color && 'g' in color && 'b' in color) {\n\t\t\treturn 'RgbColor' as const\n\t\t} else if ('h' in color && 's' in color && 'v' in color) {\n\t\t\treturn 'HsvColor' as const\n\t\t} else if ('h' in color && 's' in color && 'l' in color) {\n\t\t\treturn 'HslColor' as const\n\t\t} else if ('kelvin' in color) {\n\t\t\treturn 'number' as const\n\t\t}\n\t}\n\n\treturn undefined\n}\n"],"names":[],"mappings":"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"}