{"version":3,"file":"object.js","sources":["../../../../src/shared/object.ts"],"sourcesContent":["/**\n * Recursively processes a tuple type and returns a union of entries.\n * @typeParam T - The tuple type being processed.\n * @typeParam I - The indices of the tuple so far, initialized to an empty array.\n * @typeParam R - The accumulated result, initialized to `never`.\n * @internal\n */\ntype TupleEntry<\n\tT extends readonly unknown[],\n\tI extends unknown[] = [],\n\tR = never,\n> = T extends readonly [infer Head, ...infer Tail]\n\t? TupleEntry<Tail, [...I, unknown], R | [`${I['length']}`, Head]>\n\t: R\n\n/**\n * Maps an object literal to a union of literal entry pairs.\n * @typeParam T - The object type being processed.\n * @internal\n */\ntype ObjectEntry<T extends {}> = T extends object\n\t? {\n\t\t\t[K in keyof T]: [K, Required<T>[K]]\n\t\t}[keyof T] extends infer E\n\t\t? E extends [infer K, infer V]\n\t\t\t? K extends string | number\n\t\t\t\t? [`${K}`, V]\n\t\t\t\t: never\n\t\t\t: never\n\t\t: never\n\t: never\n\ntype Entry<T extends {}> = T extends readonly [unknown, ...unknown[]]\n\t? TupleEntry<T>\n\t: T extends ReadonlyArray<infer U>\n\t\t? [`${number}`, U]\n\t\t: ObjectEntry<T>\n\n/**\n * A type-preserving version of `Object.entries`.\n * @param obj - Any object.\n * @returns An array of key-value pairs with their types preserved.\n *\n * @example Immutable\n * ```ts\n * const foo2 = { a: 1, b: '✨' } as const\n * entries(foo2) // (['a', 1] | ['b', '✨'])[]\n * Object.entries(foo2) // [string, 1 | '✨'][]\n * ```\n *\n * @example Mutable\n * ```ts\n * const foo1 = { a: 1, b: '✨' }\n * entries(foo1) // ['a', number] | ['b', string])[]\n * Object.entries(foo1) // [string, string | number][]\n * ```\n */\nexport function entries<const T extends {}>(object: T) {\n\tif (typeof object !== 'object' || object === null) {\n\t\tconsole.error('Error: Invalid object', object)\n\t\tthrow new Error('`entries()` util called with invalid object: ' + object)\n\t}\n\n\treturn Object.entries(object) as unknown as ReadonlyArray<Entry<T>>\n}\n\n/**\n * A type-preserving version of `Object.keys`.\n * @param obj - Any object.\n * @returns An array of the keys with their types preserved.\n *\n * @example Immutable\n * ```ts\n * const foo2 = { a: 1, b: '✨' } as const\n * keys(foo2) // ('a' | 'b')[]\n * Object.keys(foo2) // string[]\n * ```\n *\n * @example Mutable\n * ```ts\n * const foo1 = { a: 1, b: '✨' }\n * keys(foo1) // readonly ('a' | 'b')[]\n * Object.keys(foo1) // string[]\n * ```\n */\nexport function keys<T extends {}>(object: T): ReadonlyArray<keyof T> {\n\tif (typeof object !== 'object' && object === null) {\n\t\tconsole.error('Error: Invalid object', object)\n\t\tthrow new Error('`keys()` util called with invalid object.')\n\t}\n\treturn Object.keys(object) as unknown as ReadonlyArray<keyof T>\n}\n\n/**\n * A type-preserving version of `Object.values`.\n * @param obj - Any object.\n * @returns An array of values with their types preserved.\n *\n * @example Immutable\n * ```ts\n * const foo2 = { a: 1, b: '✨' } as const\n * values(foo2) // (1 | '✨')[]\n * Object.values(foo2) // (1 | '✨')[]\n * ```\n *\n * @example Mutable\n * ```ts\n * const foo1 = { a: 1, b: '✨' }\n * values(foo1) // readonly (number | string)[]\n * Object.values(foo1) // (number | string)[]\n * ```\n */\nexport function values<T extends {}>(object: T): ReadonlyArray<T[keyof T]> {\n\tif (typeof object !== 'object' && object === null) {\n\t\tconsole.error('Error: Invalid object', object)\n\t\tthrow new Error('`values()` util called with invalid object.')\n\t}\n\treturn Object.values(object) as unknown as ReadonlyArray<T[keyof T]>\n}\n"],"names":[],"mappings":"AAsCA;;;;;;;;;;;;;;;;;;AAkBG;AACG,SAAU,OAAO,CAAqB,MAAS,EAAA;IACpD,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,KAAK,IAAI,EAAE;AAClD,QAAA,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,MAAM,CAAC,CAAA;AAC9C,QAAA,MAAM,IAAI,KAAK,CAAC,+CAA+C,GAAG,MAAM,CAAC,CAAA;KACzE;AAED,IAAA,OAAO,MAAM,CAAC,OAAO,CAAC,MAAM,CAAuC,CAAA;AACpE,CAAC;AAED;;;;;;;;;;;;;;;;;;AAkBG;AACG,SAAU,IAAI,CAAe,MAAS,EAAA;IAC3C,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,KAAK,IAAI,EAAE;AAClD,QAAA,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,MAAM,CAAC,CAAA;AAC9C,QAAA,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAA;KAC5D;AACD,IAAA,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,CAAsC,CAAA;AAChE,CAAC;AAED;;;;;;;;;;;;;;;;;;AAkBG;AACG,SAAU,MAAM,CAAe,MAAS,EAAA;IAC7C,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,KAAK,IAAI,EAAE;AAClD,QAAA,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,MAAM,CAAC,CAAA;AAC9C,QAAA,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAA;KAC9D;AACD,IAAA,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,CAAyC,CAAA;AACrE;;;;"}