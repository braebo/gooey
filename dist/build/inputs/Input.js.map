{"version":3,"file":"Input.js","sources":["../../../../src/inputs/Input.ts"],"sourcesContent":["import type { InputButtonGrid, ButtonGridInputOptions } from './InputButtonGrid'\nimport type { InputTextArea, TextAreaInputOptions } from './InputTextArea'\nimport type { InputButton, ButtonInputOptions } from './InputButton'\nimport type { InputSwitch, SwitchInputOptions } from './InputSwitch'\nimport type { InputSelect, SelectInputOptions } from './InputSelect'\nimport type { InputNumber, NumberInputOptions } from './InputNumber'\nimport type { InputColor, ColorInputOptions } from './InputColor'\nimport type { InputText, TextInputOptions } from './InputText'\n\nimport type { ColorFormat } from '../shared/color/types/colorFormat'\nimport type { EventCallback } from '../shared/EventManager'\nimport type { Option } from '../controllers/Select'\nimport type { Color } from '../shared/color/color'\nimport type { State } from '../shared/state'\nimport type { Commit } from '../UndoManager'\nimport type { Folder } from '../Folder'\n\nimport { EventManager } from '../shared/EventManager'\nimport { isState, state } from '../shared/state'\nimport { keys, values } from '../shared/object'\nimport { create } from '../shared/create'\nimport { Logger } from '../shared/logger'\nimport { toFn } from '../shared/toFn'\nimport { o } from '../shared/l'\n\n//· Types ··············································································¬\nexport type InputType = (typeof INPUT_TYPES)[number]\nexport type InputOptionType = (typeof INPUT_OPTION_TYPES)[number]\n\nexport const INPUT_TYPE_MAP = Object.freeze({\n\tInputText: 'TextInputOptions',\n\tInputTextArea: 'TextAreaInputOptions',\n\tInputNumber: 'NumberInputOptions',\n\tInputColor: 'ColorInputOptions',\n\tInputSelect: 'SelectInputOptions',\n\tInputButton: 'ButtonInputOptions',\n\tInputButtonGrid: 'ButtonGridInputOptions',\n\tInputSwitch: 'SwitchInputOptions',\n})\n\nexport const INPUT_TYPES = Object.freeze(keys(INPUT_TYPE_MAP))\nexport const INPUT_OPTION_TYPES = Object.freeze(values(INPUT_TYPE_MAP))\n\nexport type BindTarget = Record<any, any>\nexport type BindableObject<T extends BindTarget, K extends keyof T = keyof T> = {\n\ttarget: T\n\tkey: K\n\tinitial?: T[K]\n}\n\n/**\n * The initial value of an input can be either a raw value, or a \"binding\"\n */\nexport type ValueOrBinding<TValue = ValidInputValue, TBindTarget extends BindTarget = BindTarget> =\n\t// todo - this is silly\n\t| {\n\t\t\tvalue: TValue\n\t\t\tbinding?: BindableObject<TBindTarget>\n\t  }\n\t| {\n\t\t\tvalue?: TValue\n\t\t\tbinding: { target: TBindTarget; key: keyof TBindTarget; initial?: TValue }\n\t  }\n\t| {\n\t\t\tvalue?: TValue\n\t\t\tbinding?: { target: TBindTarget; key: keyof TBindTarget; initial?: TValue }\n\t  }\n\t| {\n\t\t\tvalue: TValue\n\t\t\tbinding?: { target: TBindTarget; key: keyof TBindTarget; initial?: TValue }\n\t  }\n\nexport type InputOptions<\n\tTValue = ValidInputValue,\n\tTBindTarget extends BindTarget = Record<any, any & TValue>,\n> = {\n\t/**\n\t * The title displayed to the left of the input.\n\t */\n\ttitle?: string\n\n\t/**\n\t * If provided, will be used as the key for the input's value in a preset.\n\t * @defaultValue `<folder_title>:<input_type>:<input_title>`\n\t */\n\tpresetId?: string\n\n\t/**\n\t * Whether the inputs are disabled.  A function can be used to dynamically determine the\n\t * disabled state.\n\t * @default false\n\t */\n\tdisabled?: boolean | (() => boolean)\n\n\t/**\n\t * Whether the input is hidden. A function can be used to dynamically determine the hidden\n\t * state.\n\t * @default false\n\t */\n\thidden?: boolean\n\n\t/**\n\t * The order in which this input should appear in its folder relative to the other inputs.\n\t * - To force an input to be first *(at the top of its folder)*, set `order` to `0` or below.\n\t * - To force an input to be last *(at the bottom of its folder)*, set `order` to any number greater than number of inputs + 1.\n\t * @default folder.inputs.size + 1\n\t */\n\torder?: number\n\n\t/**\n\t * If true, the `reset to default` button will appear when the input's value is marked dirty.\n\t * @default true\n\t */\n\tresettable?: boolean\n\n\t/**\n\t * Whether this Input should be saved as a {@link InputPreset} when saving the\n\t * {@link FolderPreset} for the {@link Folder} this Input belongs to.  If `false`, this Input\n\t * will be skipped.\n\t * @default true\n\t */\n\tsaveable?: boolean\n\n\t/**\n\t * An optional callback to run when this Input's state changes.  Also accessible via\n\t * `Input.on('change', value => {})`.\n\t */\n\tonChange?: (value: TValue) => void\n} & ValueOrBinding<TValue, TBindTarget>\n\nexport type InputPreset<T extends ValidInputOptions> = Omit<\n\tInputOptions<T>,\n\t'title' | 'saveable'\n> & {\n\t__type: InputOptionType\n\tpresetId: string\n\ttitle: string\n\tvalue: ValidInputValue\n\tdisabled: boolean\n\thidden: boolean\n\torder: number\n\tresettable: boolean\n}\n\nexport interface ElementMap<T = unknown> {\n\t[key: string]: HTMLElement | HTMLInputElement | ElementMap | T\n}\n\nexport type ValidInputValue = string | number | Color | ColorFormat | Option<any>\nexport type ValidInputOptions =\n\t| TextInputOptions\n\t| TextAreaInputOptions\n\t| NumberInputOptions\n\t| ColorInputOptions\n\t| SelectInputOptions<Option<any>>\n\t| ButtonInputOptions\n\t| ButtonGridInputOptions\n\t| SwitchInputOptions\n\nexport type ValidInput =\n\t| InputText\n\t| InputTextArea\n\t| InputNumber\n\t| InputColor\n\t| InputSelect<Option<any>>\n\t| InputButton\n\t| InputButtonGrid\n\t| InputSwitch\n\nexport type InputEvents<T extends ValidInputValue = ValidInputValue> = {\n\t/**\n\t * Called when the input's value changes, providing the new value.\n\t */\n\treadonly change: T\n\t/**\n\t * Called when a input's controllers are refreshed, providing the current value of the input.\n\t */\n\treadonly refresh: T\n}\n//⌟\n\n/**\n * An input that can be added to a {@link Folder}.  This class is extended by all\n * {@link ValidInput} classes. Inputs occupy a single row in a folder, and are in charge of\n * managing a single state value.  Inputs often combine multiple controllers to provide a rich\n * user interface for interacting with the input's value.\n *\n * @template TValueType - The type of value this input manages.\n * @template TOptions - The options object for this input, determined by the input class\n * responsible for the {@link TValueType}.\n * @template TElements - A map of all HTMLElement's created by this input.\n * @template TEvents - A map of all events emitted by this input.\n * @template TType - A string-literal type brand.  Identical to the input class name.\n */\nexport abstract class Input<\n\tTValueType extends ValidInputValue = ValidInputValue,\n\tTOptions extends ValidInputOptions = InputOptions,\n\tTElements extends ElementMap = ElementMap,\n\tTEvents extends InputEvents = InputEvents<TValueType>,\n\tTType extends InputType = InputType,\n\tT__TYPE = (typeof INPUT_TYPE_MAP)[TType],\n> {\n\tabstract readonly __type: TType\n\tabstract state: State<TValueType>\n\tabstract initialValue: ValidInputValue\n\n\treadonly opts: TOptions & { __type: T__TYPE }\n\n\t/**\n\t * Unique identifier for the input. Also used for saving and loading presets.\n\t * @default `<folder_title>:<input_type>:<input_title>`\n\t */\n\tid: string\n\n\t/**\n\t * Whether the input was initialized with a bind target/key.\n\t * @default false\n\t */\n\tbound = false\n\n\t/**\n\t * All HTMLElement's created by this input.\n\t */\n\telements = {\n\t\tcontrollers: {},\n\t} as {\n\t\tcontainer: HTMLElement\n\t\ttitle: HTMLElement\n\t\tcontent: HTMLElement\n\t\tdrawer: HTMLElement\n\t\tdrawerToggle: HTMLElement\n\t\tcontrollers: TElements\n\t\tresetBtn: HTMLElement\n\t}\n\n\t/**\n\t * Whether the controllers should bubble their events up to the input and it's listeners.\n\t * If false, the next update will be silent, after which the flag will be reset to true.\n\t */\n\tbubble = false\n\n\tprivate _title = ''\n\tprivate _index: number\n\n\t// #firstUpdate = true\n\tprivate _disabled: () => boolean\n\tprivate _hidden: () => boolean\n\n\t/**\n\t * Prevents the input from registering commits to undo history until\n\t * {@link unlock} is called.\n\t */\n\tprivate _undoLock = false\n\n\t/**\n\t * The commit object used to store the initial value of the input when\n\t * {@link lock} is called.\n\t */\n\tprivate lockCommit = {} as Commit\n\n\t/**\n\t * The input's {@link EventManager}.\n\t */\n\tprotected _dirty: () => boolean\n\tprotected _evm = new EventManager<TEvents>(['change', 'refresh'])\n\tlisten = this._evm.listen.bind(this._evm)\n\ton = this._evm.on.bind(this._evm)\n\n\tprivate __log: Logger\n\n\tconstructor(\n\t\toptions: TOptions & { __type: T__TYPE },\n\t\tpublic folder: Folder,\n\t) {\n\t\tthis.opts = options\n\t\tthis.opts.saveable ??= true\n\t\tthis.opts.resettable ??= true\n\n\t\tthis.id = this.opts.presetId ?? `${folder.presetId}_${this.opts.title}__${this.opts.__type}`\n\n\t\tthis.__log = new Logger(\n\t\t\t`SuperInput${this.opts.__type!.replaceAll(/Options|Input/g, '')} ${this.opts.title}`,\n\t\t\t{ fg: 'skyblue' },\n\t\t)\n\t\tthis.__log.fn('super constructor').debug({ presetId: this.id, options, this: this })\n\n\t\tthis._title = this.opts.title ?? ''\n\t\tthis._disabled = toFn(this.opts.disabled ?? false)\n\t\tthis._hidden = toFn(this.opts.hidden ?? false)\n\n\t\tthis._index = this.opts.order ?? this.folder.inputs.size\n\t\tthis._index += 1\n\n\t\tthis._dirty = () => this.value !== this.initialValue\n\n\t\tthis.bound = 'binding' in this.opts\n\n\t\tthis.elements.container = create('div', {\n\t\t\tclasses: ['gooey-input-container'],\n\t\t\tparent: this.folder.elements.content,\n\t\t})\n\n\t\t// Make the right side full-width if the title is empty.\n\t\tif (!this.title) {\n\t\t\tthis.element.style.setProperty('--gooey-input-section-1_width', '0px')\n\t\t}\n\n\t\tthis.elements.drawerToggle = create('div', {\n\t\t\tclasses: ['gooey-input-drawer-toggle'],\n\t\t\tparent: this.elements.container,\n\t\t})\n\n\t\tthis.elements.title = create('div', {\n\t\t\tclasses: ['gooey-input-title'],\n\t\t\tparent: this.elements.container,\n\t\t\ttextContent: this.title,\n\t\t})\n\n\t\tthis.elements.content = create('div', {\n\t\t\tclasses: ['gooey-input-content'],\n\t\t\tparent: this.elements.container,\n\t\t})\n\n\t\tthis.elements.resetBtn = create('div', {\n\t\t\tclasses: ['gooey-input-reset-btn'],\n\t\t\t// parent: this.elements.content,\n\t\t\tparent: this.elements.title,\n\t\t\ttooltip: {\n\t\t\t\ttext: 'Reset',\n\t\t\t\tplacement: 'left',\n\t\t\t\tdelay: 0,\n\t\t\t},\n\t\t\tonclick: () => {\n\t\t\t\tthis.__log.fn('reset').debug('resetting to initial value', this.initialValue)\n\t\t\t\tthis.set(this.initialValue as TValueType)\n\t\t\t},\n\t\t})\n\n\t\tthis.elements.drawer = create('div', {\n\t\t\tclasses: ['gooey-input-drawer'],\n\t\t\tparent: this.elements.content,\n\t\t})\n\n\t\tthis._evm.listen(this.elements.drawerToggle, 'click', () => {\n\t\t\tconsole.log(this)\n\t\t})\n\n\t\tif ('onChange' in options) {\n\t\t\tthis._evm.on('change', options.onChange as EventCallback<TEvents['change']>)\n\t\t}\n\n\t\tthis.index = this.index\n\t}\n\n\tget value() {\n\t\treturn this.state.value as TValueType\n\t}\n\n\t/**\n\t * The title displayed on this Input's label.\n\t */\n\tget title() {\n\t\treturn this._title\n\t}\n\tset title(v: string) {\n\t\tthis._title = v\n\t\tthis.elements.title.textContent = v\n\t}\n\n\t/**\n\t * The main Element.  Usually a container div for the rest of the Input's\n\t * {@link Input.elements|`elements`}.\n\t */\n\tget element() {\n\t\treturn this.elements.container\n\t}\n\n\tget index() {\n\t\treturn this._index\n\t}\n\tset index(v: number) {\n\t\tthis._index = v\n\t\tthis.elements.container.style.order = v.toString()\n\t}\n\n\tget undoManager() {\n\t\treturn this.folder.gooey?._undoManager\n\t}\n\n\t/**\n\t * Whether the input is disabled.  A function can be used to dynamically determine the\n\t * disabled state.\n\t */\n\tget disabled(): boolean {\n\t\treturn this._disabled()\n\t}\n\tset disabled(v: boolean | (() => boolean)) {\n\t\tthis._disabled = toFn(v)\n\t\tthis._disabled() ? this.disable() : this.enable()\n\t}\n\n\t/**\n\t * Completely hides the Input from view when set to `true`.\n\t */\n\tget hidden(): boolean {\n\t\treturn this.elements.container.classList.contains('hidden')\n\t}\n\tset hidden(v: boolean | (() => boolean)) {\n\t\tthis._hidden = toFn(v)\n\t\tthis.elements.container.classList.toggle('hidden', this._hidden())\n\t}\n\n\t/**\n\t * Wether the current state value differs from the initial state value.\n\t * @internal\n\t */\n\tprotected get dirty() {\n\t\treturn this._dirty()\n\t}\n\n\t/**\n\t * Updates the Input's state to the given value.\n\t */\n\tabstract set(v: TValueType): void\n\n\tprotected resolveState<T = TValueType>(opts: TOptions): State<T> {\n\t\tif (opts.binding) {\n\t\t\tconst s = state<T>(opts.binding.target[opts.binding.key])\n\n\t\t\tthis._evm.add(\n\t\t\t\ts.subscribe(v => {\n\t\t\t\t\topts.binding!.target[opts.binding!.key] = v\n\t\t\t\t}),\n\t\t\t)\n\n\t\t\treturn s\n\t\t} else {\n\t\t\treturn state<T>(opts.value!)\n\t\t}\n\t}\n\n\tprotected resolveInitialValue(opts: TOptions) {\n\t\tconst value = opts.binding ? opts.binding.target[opts.binding.key] : opts.value!\n\t\treturn isState(value) ? value.value : value\n\t}\n\n\t/**\n\t * Called from subclasses at the end of their `set` method to emit the `change` event.\n\t */\n\t_emit(event: keyof TEvents, v = this.state.value as TValueType) {\n\t\tif (this.opts.resettable) {\n\t\t\tthis.elements.resetBtn.classList.toggle('dirty', this._dirty())\n\t\t}\n\n\t\t// @ts-expect-error\n\t\tthis._evm.emit(event, v)\n\n\t\t// Let the folder know one of its inputs has changed.\n\t\tif (event === 'change') {\n\t\t\tthis.folder.evm.emit('change', this as any as ValidInput)\n\t\t}\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Prevents the input from registering undo history, storing the initial\n\t * for the eventual commit in {@link unlock}.\n\t */\n\tprotected lock = (from = this.state.value) => {\n\t\tthis._undoLock = true\n\t\tthis.lockCommit.from = from\n\t\tthis.__log.fn(o('lock')).debug('lockCommit:', this.lockCommit)\n\t}\n\t/**\n\t * Unlocks commits and saves the current commit stored in lock.\n\t */\n\tprotected unlock = (commit?: Partial<Commit>) => {\n\t\tthis.__log.fn(o('unlock')).debug('commit', { commit, lockCommit: this.lockCommit })\n\t\tcommit ??= {}\n\t\tcommit.target ??= this as unknown as Input<TValueType>\n\t\tcommit.to ??= this.state.value as TValueType\n\t\tcommit.from ??= this.lockCommit.from\n\t\tthis._undoLock = false\n\t\tthis.commit(commit)\n\t}\n\n\t/**\n\t * Commits a change to the input's value to the undo manager.\n\t */\n\tcommit(commit: Partial<Commit>) {\n\t\tcommit.from ??= this.state.value\n\t\tcommit.target ??= this as unknown as Input<TValueType>\n\t\tif (this._undoLock) {\n\t\t\tthis.__log.fn('commit').debug('prevented commit while locked')\n\t\t\treturn\n\t\t}\n\t\tthis.__log.fn('commit').debug('commited', commit)\n\t\tthis.undoManager?.commit(commit as Commit)\n\t}\n\n\t/**\n\t * Enables the input and any associated controllers.\n\t */\n\tenable() {\n\t\tthis._disabled = toFn(false)\n\t\treturn this\n\t}\n\t/**\n\t * Disables the input and any associated controllers. A disabled input's state can't be\n\t * changed or interacted with.\n\t */\n\tdisable() {\n\t\tthis._disabled = toFn(true)\n\t\treturn this\n\t}\n\n\t/**\n\t * Refreshes the value of any controllers to match the current input state.\n\t */\n\trefresh(v = this.state.value as TValueType) {\n\t\tif (!this.opts.resettable) return\n\t\tif (this.opts.binding) {\n\t\t\tthis.state.set(this.opts.binding.target[this.opts.binding.key])\n\t\t}\n\t\tthis.elements.resetBtn.classList.toggle('dirty', this._dirty())\n\t\tthis._evm.emit('refresh', v as TValueType)\n\t\treturn this\n\t}\n\n\tsave(overrides: Partial<InputPreset<TOptions>> = {}) {\n\t\tif (this.opts.saveable !== true) {\n\t\t\tthrow new Error('Attempted to save unsaveable Input: ' + this.title)\n\t\t}\n\n\t\tconst preset: InputPreset<any> = {\n\t\t\t__type: INPUT_TYPE_MAP[this.__type],\n\t\t\ttitle: this.title,\n\t\t\tvalue: this.state.value,\n\t\t\tdisabled: this.disabled,\n\t\t\tpresetId: this.id,\n\t\t\thidden: this.hidden,\n\t\t\torder: this.index,\n\t\t\tresettable: this.opts.resettable ?? true,\n\t\t}\n\n\t\tthis.__log.fn('save').debug(preset)\n\n\t\treturn Object.assign(preset, overrides)\n\t}\n\n\tload(json: InputPreset<TOptions> | string) {\n\t\tconst data = typeof json === 'string' ? (JSON.parse(json) as InputPreset<TOptions>) : json\n\t\tthis.id = data.presetId\n\t\tthis.disabled = data.disabled\n\t\tthis.hidden = data.hidden\n\t\tthis.initialValue = data.value\n\t\tthis.set(data.value as TValueType)\n\t}\n\n\tdispose() {\n\t\tthis.__log.fn('dispose').debug(this)\n\t\tthis._evm.dispose()\n\n\t\tconst rm = (elOrObj: any) => {\n\t\t\tif (elOrObj instanceof HTMLElement || elOrObj instanceof SVGElement) {\n\t\t\t\telOrObj.remove()\n\t\t\t} else if (typeof elOrObj === 'object') {\n\t\t\t\tfor (const k in elOrObj) {\n\t\t\t\t\trm(elOrObj[k])\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\trm(this.elements)\n\t}\n}\n"],"names":[],"mappings":"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"}