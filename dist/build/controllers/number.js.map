{"version":3,"file":"number.js","sources":["../../../../src/controllers/number.ts"],"sourcesContent":["import type { InputNumber } from '../inputs/InputNumber'\nimport type { ElementMap } from '../inputs/Input'\nimport type { ControllerFactory } from './types'\n\nimport { svgChevron } from '../svg/chevronSvg'\nimport { create } from '../shared/create'\n\nexport const rangeController: ControllerFactory<HTMLInputElement> = (input, opts, parent) => {\n\tconst range = create('input', {\n\t\ttype: 'range',\n\t\tclasses: ['fracgui-controller', 'fracgui-input-number-range'],\n\t\tvalue: String(input.state.value),\n\t\tparent,\n\t})\n\n\tif ('min' in opts) range.min = String(opts.min)\n\tif ('max' in opts) range.max = String(opts.max)\n\tif ('step' in opts) range.step = String(opts.step)\n\n\tinput.listen(range, 'input', input.set.bind(input) as EventListener)\n\n\treturn range\n}\n\nexport const numberButtonsController: ControllerFactory<\n\t{\n\t\tcontainer: HTMLDivElement\n\t\tincrement: HTMLDivElement\n\t\tdecrement: HTMLDivElement\n\t},\n\tInputNumber\n> = (input, opts, parent) => {\n\tconst container = create('div', {\n\t\tclasses: ['fracgui-input-number-buttons-container'],\n\t\tparent,\n\t})\n\n\tconst increment = create('div', {\n\t\tclasses: [\n\t\t\t'fracgui-controller',\n\t\t\t'fracgui-input-number-button',\n\t\t\t'fracgui-input-number-buttons-increment',\n\t\t],\n\t\tparent: container,\n\t})\n\tincrement.appendChild(svgChevron())\n\tinput.listen(increment, 'pointerdown', rampChangeUp)\n\n\tconst decrement = create('div', {\n\t\tclasses: [\n\t\t\t'fracgui-controller',\n\t\t\t'fracgui-input-number-button',\n\t\t\t'fracgui-input-number-buttons-decrement',\n\t\t],\n\t\tparent: container,\n\t})\n\tconst upsideDownChevron = svgChevron()\n\tupsideDownChevron.setAttribute('style', 'transform: rotate(180deg)')\n\tdecrement.appendChild(upsideDownChevron)\n\tinput.listen(decrement, 'pointerdown', rampChangeDown)\n\n\tfunction rampChange(direction = 1) {\n\t\tconst step = 'step' in opts ? (opts.step as number) : 1\n\n\t\tlet delay = 300\n\t\tlet stop = false\n\t\tlet delta = 0\n\t\tlet timeout: ReturnType<typeof setTimeout>\n\n\t\tconst change = () => {\n\t\t\tclearTimeout(timeout)\n\t\t\tif (stop) return\n\n\t\t\tdelta += delay\n\t\t\tif (delta > 1000) {\n\t\t\t\tdelay /= 2\n\t\t\t\tdelta = 0\n\t\t\t}\n\n\t\t\tinput.set(input.state.value + step * direction)\n\t\t\ttimeout = setTimeout(change, delay)\n\t\t}\n\n\t\tconst stopChanging = () => {\n\t\t\tstop = true\n\t\t\twindow.removeEventListener('pointerup', stopChanging)\n\t\t\twindow.removeEventListener('pointercancel', stopChanging)\n\t\t}\n\n\t\twindow.addEventListener('pointercancel', stopChanging, { once: true })\n\t\twindow.addEventListener('pointerup', stopChanging, { once: true })\n\n\t\tchange()\n\t}\n\n\tfunction rampChangeUp() {\n\t\trampChange(1)\n\t}\n\n\tfunction rampChangeDown() {\n\t\trampChange(-1)\n\t}\n\n\treturn {\n\t\tcontainer,\n\t\tincrement,\n\t\tdecrement,\n\t} as const satisfies ElementMap\n}\n"],"names":[],"mappings":";;AAOa,MAAA,eAAe,GAAwC,CAAC,KAAK,EAAE,IAAI,EAAE,MAAM,KAAI;AAC3F,IAAA,MAAM,KAAK,GAAG,MAAM,CAAC,OAAO,EAAE;AAC7B,QAAA,IAAI,EAAE,OAAO;AACb,QAAA,OAAO,EAAE,CAAC,oBAAoB,EAAE,4BAA4B,CAAC;QAC7D,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC;QAChC,MAAM;AACN,KAAA,CAAC,CAAA;IAEF,IAAI,KAAK,IAAI,IAAI;QAAE,KAAK,CAAC,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IAC/C,IAAI,KAAK,IAAI,IAAI;QAAE,KAAK,CAAC,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IAC/C,IAAI,MAAM,IAAI,IAAI;QAAE,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;AAElD,IAAA,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,EAAE,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAkB,CAAC,CAAA;AAEpE,IAAA,OAAO,KAAK,CAAA;AACb;;;;"}